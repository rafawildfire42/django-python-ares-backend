name: Deploy to EC2
on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan 18.191.144.188 >> ~/.ssh/known_hosts
        env:
          EC2_PRIVATE_KEY: ${{ secrets.EC2_PRIVATE_KEY }}

      - name: Deploy to EC2
        run: |
          # Copy the SSL certificate and private key to the appropriate directory
          mkdir -p /tmp/certificates
          echo "${{ secrets.SSL_PRIVATE_KEY }}" > /tmp/certificates/privkey.key
          echo "${{ secrets.SSL_CERTIFICATE }}" > /tmp/certificates/fullchain.crt

          # Transfer the SSL certificate and private key to the EC2 instance
          scp -i ~/.ssh/id_rsa /tmp/certificates/privkey.key /tmp/certificates/fullchain.crt ubuntu@18.191.144.188:/home/ubuntu/backend/certificates/

          # Deploy the Django application and configure SSL
          ssh -i ~/.ssh/id_rsa ubuntu@18.191.144.188 'bash -s' << \EOF
            source /home/ubuntu/backend/aresenv/bin/activate &&
            cd /home/ubuntu/backend/ares-backend &&
            git pull &&
            poetry install &&
            export SECRET_KEY=${{ secrets.SECRET_KEY }} &&
            export DEBUG=False &&
            export DATABASE_URL='${{ secrets.DATABASE_URL }}' &&
            DJANGO_DEPLOY=yes python manage.py collectstatic --noinput &&
            python manage.py makemigrations &&
            python manage.py migrate &&
            
            # Check if the server on port 8000 is not running
            if ! nc -z localhost 8000; then
              nohup gunicorn aresbackend.wsgi:application --bind 0.0.0.0:8000 --keyfile /home/ubuntu/backend/certificates/privkey.key --certfile /home/ubuntu/backend/certificates/fullchain.crt > gunicorn.log 2>&1
            else
              echo "Server on port 8000 is already running. Restarting Django server..."
              # Restart Django server
              pkill -f "gunicorn aresbackend.wsgi:application"
              nohup gunicorn aresbackend.wsgi:application --bind 0.0.0.0:8000 --keyfile /home/ubuntu/backend/certificates/privkey.key --certfile /home/ubuntu/backend/certificates/fullchain.crt > gunicorn.log 2>&1 &
              echo "Django server restarted."
            fi
          EOF
